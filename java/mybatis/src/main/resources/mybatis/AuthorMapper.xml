<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：作用是为了分类管理映射文件中的MappedStatement对象 -->
<mapper namespace="me.warriorg.mybatis.dao.AuthorMapper">

    <!--
    #{} 创建 PreparedStatement 参数并安全地设置参数（就像使用 ? 一样）。这样做更安全，更迅速，通常也是首选做法
    ${} 插入一个不转义的字符串 接受用户的输入，并将其用于语句中的参数是不安全的，会导致潜在的 SQL 注入攻击
    -->

    <!--
    cache – 给定命名空间的缓存配置。
    cache-ref – 其他命名空间缓存配置的引用。
    resultMap – 是最复杂也是最强大的元素，用来描述如何从数据库结果集中来加载对象。
    sql – 可被其他语句引用的可重用语句块。
    insert – 映射插入语句
    update – 映射更新语句
    delete – 映射删除语句
    select – 映射查询语句
    -->

    <!-- 子标签
    constructor - 用于在实例化类时，注入结果到构造方法中
        idArg - ID 参数;标记出作为 ID 的结果可以帮助提高整体性能
        arg - 将被注入到构造方法的一个普通结果
    id – 一个 ID 结果;标记出作为 ID 的结果可以帮助提高整体性能
    result – 注入到字段或 JavaBean 属性的普通结果
    association – 一个复杂类型的关联;许多结果将包装成这种类型
        嵌套结果映射 – 关联可以指定为一个 resultMap 元素，或者引用一个
    collection – 一个复杂类型的集合
        嵌套结果映射 – 集合可以指定为一个 resultMap 元素，或者引用一个
    discriminator – 使用结果值来决定使用哪个 resultMap
        case – 基于某些值的结果映射
            嵌套结果映射 – 一个 case 也是一个映射它本身的结果,因此可以包含很多相 同的元素，或者它可以参照一个外部的 resultMap。
    -->
    <!-- 属性
    id: 当前命名空间中的一个唯一标识，用于标识一个result map.
    type: 类的完全限定名, 或者一个类型别名 (内置的别名可以参考上面的表格).
    autoMapping: 如果设置这个属性，MyBatis将会为这个ResultMap开启或者关闭自动映射。这个属性会覆盖全局的属性 autoMappingBehavior。默认值为：unset。
    -->
    <resultMap id="authorMap" type="me.warriorg.mybatis.domain.Author">
        <!--
        id 和 result 都将一个列的值映射到一个简单数据类型(字符串,整型,双精度浮点数,日期等)的属性或字段。
        id 表示的结果将是对象的标识属性，这会在比较对象实例时用到。 这样可以提高整体的性能，尤其是缓存和嵌套结果映射(也就是联合映射)的时候。
        -->
        <!--
        property: 映射到列结果的字段或属性。如果用来匹配的 JavaBeans 存在给定名字的属性，那么它将会被使用。
            否则 MyBatis 将会寻找给定名称 property 的字段。 无论是哪一种情形，你都可以使用通常的点式分隔形式进行复杂属性导航。
            比如,你可以这样映射一些简单的东西: “username” ,或者映射到一些复杂的东西: “address.street.number” 。
        column: 数据库中的列名,或者是列的别名。一般情况下，这和 传递给 resultSet.getString(columnName) 方法的参数一样。
        javaType: 一个 Java 类的完全限定名,或一个类型别名(参考上面内建类型别名 的列表) 。
            如果你映射到一个 JavaBean, MyBatis 通常可以断定类型。 然而,如果你映射到的是 HashMap,那么你应该明确地指定 javaType 来保证期望的行为。
        jdbcType: JDBC 类型，所支持的 JDBC 类型参见这个表格之后的“支持的 JDBC 类型”。
            只需要在可能执行插入、更新和删除的允许空值的列上指定 JDBC 类型。这是 JDBC 的要求而非 MyBatis 的要求。
            如果你直接面向 JDBC 编程,你需要对可能为 null 的值指定这个类型。
        typeHandler: 我们在前面讨论过的默认类型处理器。使用这个属性,你可以覆盖默 认的类型处理器。这个属性值是一个类型处理 器实现类的完全限定名，或者是类型别名。
        -->
        <id property="id" column="id" javaType="String" jdbcType="VARCHAR"></id>
        <result property="name" column="name"></result>
        <result property="email" column="email"></result>
    </resultMap>

    <resultMap id="blogResult" type="me.warriorg.mybatis.domain.Author">
        <!-- ofType 这个属性用来区分 JavaBean(或字段)属性类型和集合包含的类型来说是很重要的 -->
        <collection property="blogs" javaType="ArrayList" column="author_id" ofType="blog" select="selectAuthorForBlog"/>
    </resultMap>

    <sql id="authorColumn"> ${alias}.id,${alias}.name,${alias}.email</sql>

    <!--
    id: 在命名空间中唯一的标识符，可以被用来引用这条语句。
    parameterType: 将会传入这条语句的参数类的完全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过 TypeHandler 推断出具体传入语句的参数，默认值为 unset。
    resultType: 从这条语句中返回的期望类型的类的完全限定名或别名。注意如果是集合情形，那应该是集合可以包含的类型，而不能是集合本身。使用 resultType 或 resultMap，但不能同时使用。
    resultMap: 外部 resultMap 的命名引用。结果集的映射是 MyBatis 最强大的特性，对其有一个很好的理解的话，许多复杂映射的情形都能迎刃而解。使用 resultMap 或 resultType，但不能同时使用。
    flushCache: 将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：false。
    useCache: 将其设置为 true，将会导致本条语句的结果被二级缓存，默认值：对 select 元素为 true。
    timeout: 这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）。
    fetchSize: 这是尝试影响驱动程序每次批量返回的结果行数和这个设置值相等。默认值为 unset（依赖驱动）。
    statementType: STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。
    resultSetType: FORWARD_ONLY，SCROLL_SENSITIVE 或 SCROLL_INSENSITIVE 中的一个，默认值为 unset （依赖驱动）。
    databaseId: 如果配置了 databaseIdProvider，MyBatis 会加载所有的不带 databaseId 或匹配当前 databaseId 的语句；如果带或者不带的语句都有，则不带的会被忽略。
    resultOrdered: 这个设置仅针对嵌套结果 select 语句适用：如果为 true，就是假设包含了嵌套结果集或是分组了，这样的话当返回一个主结果行的时候，就不会发生有对前面结果集的引用的情况。这就使得在获取嵌套的结果集的时候不至于导致内存不够用。默认值：false。
    resultSets: 这个设置仅对多结果集的情况适用，它将列出语句执行后返回的结果集并每个结果集给一个名称，名称是逗号分隔的。
    -->
    <select id="findById" parameterType="string" resultType="me.warriorg.mybatis.domain.Author" >
        SELECT
        <include refid="authorColumn"><property name="alias" value="t1"></property></include>
        FROM author t1 WHERE t1.id = #{id}
    </select>

    <select id="findAll" resultType="me.warriorg.mybatis.domain.Author">
        select * FROM author
    </select>

    <select id="findAllResultMap" resultMap="authorMap">
        select * FROM author
    </select>

    <select id="findAuthorBlog" resultMap="blogResult">
        select * from author
    </select>

    <select id="selectAuthorForBlog" resultType="me.warriorg.mybatis.domain.Blog">
        select * from blog where author_id = #{id}
    </select>

    <!--
    id: 命名空间中的唯一标识符，可被用来代表这条语句。
    parameterType: 将要传入语句的参数的完全限定类名或别名。这个属性是可选的，因为 MyBatis 可以通过 TypeHandler 推断出具体传入语句的参数，默认值为 unset。
    flushCache: 将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：true（对应插入、更新和删除语句）。
    timeout: 这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）。
    statementType: STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。
    useGeneratedKeys:（仅对 insert 和 update 有用）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系数据库管理系统的自动递增字段），默认值：false。
    keyProperty: 仅对 insert 和 update 有用）唯一标记一个属性，MyBatis 会通过 getGeneratedKeys 的返回值或者通过 insert 语句的 selectKey 子元素设置它的键值，默认：unset。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
    keyColumn: （仅对 insert 和 update 有用）通过生成的键值设置表中的列名，这个设置仅在某些数据库（像 PostgreSQL）是必须的，当主键列不是表中的第一列的时候需要设置。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
    databaseId: 如果配置了 databaseIdProvider，MyBatis 会加载所有的不带 databaseId 或匹配当前 databaseId 的语句；如果带或者不带的语句都有，则不带的会被忽略。
    -->
    <!-- insert – 映射插入语句 -->
    <insert id="insertAuthor" parameterType="me.warriorg.mybatis.domain.Author">
        insert into Author (id, name, email) values (#{id}, #{name}, #{email})
    </insert>

    <insert id="insertAuthorNullId" parameterType="me.warriorg.mybatis.domain.Author">
        <!--
        keyProperty: selectKey 语句结果应该被设置的目标属性。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
        keyColumn: 匹配属性的返回结果集中的列名称。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
        resultType: 结果的类型。MyBatis 通常可以推算出来，但是为了更加确定写上也不会有什么问题。MyBatis 允许任何简单类型用作主键的类型，包括字符串。如果希望作用于多个生成的列，则可以使用一个包含期望属性的 Object 或一个 Map。
        order: 这可以被设置为 BEFORE 或 AFTER。如果设置为 BEFORE，那么它会首先选择主键，设置 keyProperty 然后执行插入语句。如果设置为 AFTER，那么先执行插入语句，然后是 selectKey 元素 - 这和像 Oracle 的数据库相似，在插入语句内部可能有嵌入索引调用。
        statementType: 与前面相同，MyBatis 支持 STATEMENT，PREPARED 和 CALLABLE 语句的映射类型，分别代表 PreparedStatement 和 CallableStatement 类型。
        -->
        <selectKey keyProperty="id" resultType="String" order="BEFORE">
            select RANDOM_UUID()
        </selectKey>
        insert into Author (id, name, email) values (#{id}, #{name}, #{email})
    </insert>

    <!--update – 映射更新语句-->
    <update id="updateAuthorById" parameterType="me.warriorg.mybatis.domain.Author">
        update Author set name = #{name}, email = #{email} where id = #{id}
    </update>

    <!--delete – 映射删除语句-->
    <delete id="deleteAuthorById">
      delete from Author where id = #{id}
    </delete>
</mapper>